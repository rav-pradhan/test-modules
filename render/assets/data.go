// +build debug

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// locales/core.cy.toml (19.237kB)
// locales/core.en.toml (17.835kB)
// templates/error.tmpl (2.136kB)
// templates/main.tmpl (2.746kB)
// templates/partials/banners/census.tmpl (700B)
// templates/partials/banners/cookies.tmpl (2.305kB)
// templates/partials/banners/covid.tmpl (736B)
// templates/partials/banners/survey.tmpl (778B)
// templates/partials/breadcrumb.tmpl (1.025kB)
// templates/partials/feedback.tmpl (2.818kB)
// templates/partials/filter-selection.tmpl (751B)
// templates/partials/footer.tmpl (4.278kB)
// templates/partials/gtm-data-layer.tmpl (1.169kB)
// templates/partials/header.tmpl (19.196kB)
// templates/partials/json-ld/base.tmpl (334B)
// templates/partials/json-ld/dataset/common.tmpl (747B)
// templates/partials/json-ld/dataset/filterable.tmpl (889B)
// templates/partials/json-ld/dataset/legacy.tmpl (913B)
// templates/partials/json-ld/dataset/timeseries.tmpl (154B)
// templates/partials/json-ld/homepage.tmpl (417B)
// templates/partials/latest-release-alert.tmpl (494B)
// templates/partials/release-alert.tmpl (986B)
// templates/partials/spinner.tmpl (932B)

package assets

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %w", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

// localesCoreCyToml reads file data from disk. It returns an error on failure.
func localesCoreCyToml() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/locales/core.cy.toml"
	name := "locales/core.cy.toml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// localesCoreEnToml reads file data from disk. It returns an error on failure.
func localesCoreEnToml() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/locales/core.en.toml"
	name := "locales/core.en.toml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesErrorTmpl reads file data from disk. It returns an error on failure.
func templatesErrorTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/error.tmpl"
	name := "templates/error.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesMainTmpl reads file data from disk. It returns an error on failure.
func templatesMainTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/main.tmpl"
	name := "templates/main.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsBannersCensusTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsBannersCensusTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/banners/census.tmpl"
	name := "templates/partials/banners/census.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsBannersCookiesTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsBannersCookiesTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/banners/cookies.tmpl"
	name := "templates/partials/banners/cookies.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsBannersCovidTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsBannersCovidTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/banners/covid.tmpl"
	name := "templates/partials/banners/covid.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsBannersSurveyTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsBannersSurveyTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/banners/survey.tmpl"
	name := "templates/partials/banners/survey.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsBreadcrumbTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsBreadcrumbTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/breadcrumb.tmpl"
	name := "templates/partials/breadcrumb.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsFeedbackTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsFeedbackTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/feedback.tmpl"
	name := "templates/partials/feedback.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsFilterSelectionTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsFilterSelectionTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/filter-selection.tmpl"
	name := "templates/partials/filter-selection.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsFooterTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsFooterTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/footer.tmpl"
	name := "templates/partials/footer.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsGtmDataLayerTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsGtmDataLayerTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/gtm-data-layer.tmpl"
	name := "templates/partials/gtm-data-layer.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsHeaderTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsHeaderTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/header.tmpl"
	name := "templates/partials/header.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsJsonLdBaseTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsJsonLdBaseTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/json-ld/base.tmpl"
	name := "templates/partials/json-ld/base.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsJsonLdDatasetCommonTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsJsonLdDatasetCommonTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/json-ld/dataset/common.tmpl"
	name := "templates/partials/json-ld/dataset/common.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsJsonLdDatasetFilterableTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsJsonLdDatasetFilterableTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/json-ld/dataset/filterable.tmpl"
	name := "templates/partials/json-ld/dataset/filterable.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsJsonLdDatasetLegacyTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsJsonLdDatasetLegacyTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/json-ld/dataset/legacy.tmpl"
	name := "templates/partials/json-ld/dataset/legacy.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsJsonLdDatasetTimeseriesTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsJsonLdDatasetTimeseriesTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/json-ld/dataset/timeseries.tmpl"
	name := "templates/partials/json-ld/dataset/timeseries.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsJsonLdHomepageTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsJsonLdHomepageTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/json-ld/homepage.tmpl"
	name := "templates/partials/json-ld/homepage.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsLatestReleaseAlertTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsLatestReleaseAlertTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/latest-release-alert.tmpl"
	name := "templates/partials/latest-release-alert.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsReleaseAlertTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsReleaseAlertTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/release-alert.tmpl"
	name := "templates/partials/release-alert.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// templatesPartialsSpinnerTmpl reads file data from disk. It returns an error on failure.
func templatesPartialsSpinnerTmpl() (*asset, error) {
	path := "/Users/ravipradhan/Documents/personal-projects/test-modules/render/assets/templates/partials/spinner.tmpl"
	name := "templates/partials/spinner.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %w", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"locales/core.cy.toml":                               localesCoreCyToml,
	"locales/core.en.toml":                               localesCoreEnToml,
	"templates/error.tmpl":                               templatesErrorTmpl,
	"templates/main.tmpl":                                templatesMainTmpl,
	"templates/partials/banners/census.tmpl":             templatesPartialsBannersCensusTmpl,
	"templates/partials/banners/cookies.tmpl":            templatesPartialsBannersCookiesTmpl,
	"templates/partials/banners/covid.tmpl":              templatesPartialsBannersCovidTmpl,
	"templates/partials/banners/survey.tmpl":             templatesPartialsBannersSurveyTmpl,
	"templates/partials/breadcrumb.tmpl":                 templatesPartialsBreadcrumbTmpl,
	"templates/partials/feedback.tmpl":                   templatesPartialsFeedbackTmpl,
	"templates/partials/filter-selection.tmpl":           templatesPartialsFilterSelectionTmpl,
	"templates/partials/footer.tmpl":                     templatesPartialsFooterTmpl,
	"templates/partials/gtm-data-layer.tmpl":             templatesPartialsGtmDataLayerTmpl,
	"templates/partials/header.tmpl":                     templatesPartialsHeaderTmpl,
	"templates/partials/json-ld/base.tmpl":               templatesPartialsJsonLdBaseTmpl,
	"templates/partials/json-ld/dataset/common.tmpl":     templatesPartialsJsonLdDatasetCommonTmpl,
	"templates/partials/json-ld/dataset/filterable.tmpl": templatesPartialsJsonLdDatasetFilterableTmpl,
	"templates/partials/json-ld/dataset/legacy.tmpl":     templatesPartialsJsonLdDatasetLegacyTmpl,
	"templates/partials/json-ld/dataset/timeseries.tmpl": templatesPartialsJsonLdDatasetTimeseriesTmpl,
	"templates/partials/json-ld/homepage.tmpl":           templatesPartialsJsonLdHomepageTmpl,
	"templates/partials/latest-release-alert.tmpl":       templatesPartialsLatestReleaseAlertTmpl,
	"templates/partials/release-alert.tmpl":              templatesPartialsReleaseAlertTmpl,
	"templates/partials/spinner.tmpl":                    templatesPartialsSpinnerTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = true

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"locales": {nil, map[string]*bintree{
		"core.cy.toml": {localesCoreCyToml, map[string]*bintree{}},
		"core.en.toml": {localesCoreEnToml, map[string]*bintree{}},
	}},
	"templates": {nil, map[string]*bintree{
		"error.tmpl": {templatesErrorTmpl, map[string]*bintree{}},
		"main.tmpl": {templatesMainTmpl, map[string]*bintree{}},
		"partials": {nil, map[string]*bintree{
			"banners": {nil, map[string]*bintree{
				"census.tmpl": {templatesPartialsBannersCensusTmpl, map[string]*bintree{}},
				"cookies.tmpl": {templatesPartialsBannersCookiesTmpl, map[string]*bintree{}},
				"covid.tmpl": {templatesPartialsBannersCovidTmpl, map[string]*bintree{}},
				"survey.tmpl": {templatesPartialsBannersSurveyTmpl, map[string]*bintree{}},
			}},
			"breadcrumb.tmpl": {templatesPartialsBreadcrumbTmpl, map[string]*bintree{}},
			"feedback.tmpl": {templatesPartialsFeedbackTmpl, map[string]*bintree{}},
			"filter-selection.tmpl": {templatesPartialsFilterSelectionTmpl, map[string]*bintree{}},
			"footer.tmpl": {templatesPartialsFooterTmpl, map[string]*bintree{}},
			"gtm-data-layer.tmpl": {templatesPartialsGtmDataLayerTmpl, map[string]*bintree{}},
			"header.tmpl": {templatesPartialsHeaderTmpl, map[string]*bintree{}},
			"json-ld": {nil, map[string]*bintree{
				"base.tmpl": {templatesPartialsJsonLdBaseTmpl, map[string]*bintree{}},
				"dataset": {nil, map[string]*bintree{
					"common.tmpl": {templatesPartialsJsonLdDatasetCommonTmpl, map[string]*bintree{}},
					"filterable.tmpl": {templatesPartialsJsonLdDatasetFilterableTmpl, map[string]*bintree{}},
					"legacy.tmpl": {templatesPartialsJsonLdDatasetLegacyTmpl, map[string]*bintree{}},
					"timeseries.tmpl": {templatesPartialsJsonLdDatasetTimeseriesTmpl, map[string]*bintree{}},
				}},
				"homepage.tmpl": {templatesPartialsJsonLdHomepageTmpl, map[string]*bintree{}},
			}},
			"latest-release-alert.tmpl": {templatesPartialsLatestReleaseAlertTmpl, map[string]*bintree{}},
			"release-alert.tmpl": {templatesPartialsReleaseAlertTmpl, map[string]*bintree{}},
			"spinner.tmpl": {templatesPartialsSpinnerTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
